****APP CONFIG****

mv appinfo/app.sample.php appinfo/app.php

Modify the lines that say setAppValue to have the correct value.  The comments should be helpful.


You will need to create two subdirectories for multiinstance for the syncing:
cd <path to multiinstance app>
mkdir db_sync
chown //FIX
mkdir db_sync_recv
chown //FIX

You will need to create the 'cronErrorLog' cron/error.txt file.
touch cron/error.txt
chown //FIX

****CONFIGURE APACHE GROUP****
www-data is a pseudo-user, but we need a real user for some of the syncing tasks.
<user> should be whatever user "owns" the owncloud code.

sudo usermod -a -G www-data <user>

Close all terminals and reopen them.  This change should now be in effect.

Files that need to add group write permissions:
cd <oc_directory>; sudo chown 660 config/config.php 

****SETUP SSH****

The instances will need to run both the ssh client and the ssh server.
Install ssh server:
sudo apt-get install openssh-server

Modify /etc/ssh/sshd_config  so the following are uncommented and contain these settings:
PermitRootLogin no
PubkeyAuthentication yes
AuthorizedKeysFile	%h/.ssh/authorized_keys

sudo /etc/init.d/ssh restart


***Not sure what user to use at this point since ssh isn't working
Generate ssh rsa keys for www-data user if they are not already created.  They should not have a passphrase (just press enter).
Create a directory that www-data can write to (chown -R www-data:www-data <DIR>)
Run the below command, with the 'village1 apache' changed to whatever comment you want, easiest to have it identify the machine and user.
sudo su - www-data -c "ssh-keygen -t rsa -C \"village1 apache\""
Instead of putting the id_rsa in /var/www/.ssh, enter the full path for the directory you made for www-data.
For the passphrase, just press enter.

Move the keys:
sudo mkdir /var/www/.ssh
sudo mv <DIR>/id_rsa* /var/www/.ssh

You can then delete your <DIR>.

Manually add your instance's www-data public key to the UCSB /var/www/.ssh/authorized_keys file and add UCSB's public key to your instance's /var/www/.ssh/authorized_keys file (you'll need to create the /var/www/.ssh and the authorized_keys file).

Test that this has worked with:
sudo su - www-data -c "ssh -vvv www-data@<UCSB_IP>"
Press enter if promped to accept the fingerprint
If the ssh looks successful, verify the username and machine with `env` and `ifconfig`, use `exit` to logout




****SETUP RSYNC****

Move setup file 'rsyncd.conf' to /etc/rsyncd.conf

Verify that (or modify it so that) /etc/default/rsync has 
RSYNC_ENABLE=true

Restart machine.  Verify rsync is running: /var/log/rsyncd.log


Add task to /etc/crontab:
#Rsync client
2,17,32,47 * * * * www-data php5 /home/sarah/public_html/apps/multiinstance/cron/rsync.php >> /home/sarah/public_html/apps/multiinstance/cron/error.txt 2>&1

To verify that it is running (it should run 2 minutes after the hour and every fifteen minutes after that)
sudo grep CRON /var/log/syslog


